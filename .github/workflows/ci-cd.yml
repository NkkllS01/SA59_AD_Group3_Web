name: CI/CD for ASP.NET MVC

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build_and_test:
    name: Build & Test ASP.NET App
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
            fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0'

      - name: Restore Dependencies
        run: dotnet restore SingNature/SingNature.sln

      - name: Build Application
        run: dotnet build SingNature/SingNature.sln --configuration Release --no-restore

      - name: Run Unit Tests
        run: dotnet test SingNature/SingNature.sln --configuration Release --no-restore --logger trx --results-directory TestResults

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: TestResults

  security_scan:
    name: Static Security Analysis (SAST)
    runs-on: ubuntu-latest
    needs: build_and_test
    permissions:
        contents: read
        packages: read
        security-events: write  # Required for CodeQL to upload security scan results

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
            fetch-depth: 0  # Ensures full commit history

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
            dotnet-version: '8.0'
    
      - name: Restore Dependencies
        run: dotnet restore SingNature/SingNature.sln

      - name: Clean Project Before Build
        run: dotnet clean SingNature/SingNature.sln --configuration Release
    
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: csharp
          build-mode: manual
          source-root: SingNature/SingNature
          
      - name: Build Application
        run: dotnet build SingNature/SingNature.sln --configuration Release --no-restore -bl:build.binlog

      - name: Upload Build Log for Debugging
        uses: actions/upload-artifact@v4
        with:
            name: build-log
            path: build.binlog

      - name: Manually Extract C# Code for CodeQL
        run: |
            ls -al SingNature/SingNature/bin/Release/net8.0/
            cp -r SingNature/SingNature/bin/Release/net8.0/* /home/runner/work/_temp/codeql_databases/csharp/
            cp -r SingNature/SingNature/* /home/runner/work/_temp/codeql_databases/csharp/
        continue-on-error: true

      - name: Perform CodeQL Analysis and Generate SARIF Report
        uses: github/codeql-action/analyze@v3
        with:
            output: results-sast.sarif

      - name: Upload CodeQL SARIF Report as Artifact
        uses: actions/upload-artifact@v4
        with:
            name: codeql-report
            path: results-sast.sarif

  dast_scan:
    name: Dynamic Security Analysis (DAST)
    runs-on: ubuntu-latest
    needs: build_and_test

    steps:
      - name: Check Docker Installation
        run: docker --version

      - name: Login to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "oauth" --password-stdin

      - name: Manually Pull OWASP ZAP Docker Image
        run: docker pull ghcr.io/zaproxy/zaproxy:stable

    #   - name: Run OWASP ZAP Full Scan
    #     uses: zaproxy/action-full-scan@v0.4.0
    #     with:
    #         target: 'http://your-staging-url.com'
           

#   deploy:
#     name: Deploy to DigitalOcean Droplet
#     runs-on: ubuntu-latest
#     needs: [build_and_test, security_scan, dast_scan]
    
#     steps:
#       - name: Checkout Code
#         uses: actions/checkout@v3

#       - name: Setup .NET
#         uses: actions/setup-dotnet@v3
#         with:
#           dotnet-version: '9.0'

#       - name: Publish Application
#         run: |
#           dotnet publish SingNature/SingNature.sln -c Release -o publish

#       - name: Deploy to DigitalOcean
#         uses: appleboy/scp-action@v0.1.4
#         with:
#           host: ${{ secrets.DROPLET_IP }}
#           username: ${{ secrets.DROPLET_USER }}
#           key: ${{ secrets.DROPLET_SSH_KEY }}
#           source: "publish/"
#           target: "/var/www/singnature"

#       - name: Restart Application
#         uses: appleboy/ssh-action@master
#         with:
#           host: ${{ secrets.DROPLET_IP }}
#           username: ${{ secrets.DROPLET_USER }}
#           key: ${{ secrets.DROPLET_SSH_KEY }}
#           script: |
#             sudo systemctl restart singnature
