name: CI/CD for ASP.NET MVC

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    types:
      - opened
      - synchronize
  workflow_dispatch: 

jobs:
  build_and_test:
    name: Build & Test ASP.NET App
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
            fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'
          cache: true

      - name: Clear NuGet Cache
        run: dotnet nuget locals all --clear

      - name: Restore Dependencies
        run: dotnet restore SingNature/SingNature.sln

      - name: Build Application
        run: dotnet build SingNature/SingNature.sln --configuration Release --no-restore

      - name: Run Unit Tests
        run: dotnet test SingNature/SingNature.sln --configuration Release --no-restore --logger trx --results-directory TestResults

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: TestResults

  # security_scan:
  #   name: Static Security Analysis (SAST)
  #   runs-on: ubuntu-latest
  #   needs: build_and_test
  #   permissions:
  #       contents: read
  #       packages: read
  #       security-events: write  # Required for CodeQL to upload security scan results

  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v3
  #       with:
  #           fetch-depth: 0  # Ensures full commit history

  #     - name: Setup .NET
  #       uses: actions/setup-dotnet@v3
  #       with:
  #           dotnet-version: '8.0.x'
  #           cache: true
    
  #     - name: Restore Dependencies
  #       run: dotnet restore SingNature/SingNature.sln

  #     - name: Clean Project Before Build
  #       run: dotnet clean SingNature/SingNature.sln --configuration Release
    
  #     - name: Initialize CodeQL
  #       uses: github/codeql-action/init@v3
  #       with:
  #         languages: csharp
  #         build-mode: manual
  #         source-root: SingNature/SingNature
          
  #     - name: Build Application
  #       run: dotnet build SingNature/SingNature.sln --configuration Release --no-restore -bl:build.binlog

  #     - name: Upload Build Log for Debugging
  #       uses: actions/upload-artifact@v4
  #       with:
  #           name: build-log
  #           path: build.binlog

  #     - name: Manually Extract C# Code for CodeQL
  #       run: |
  #           ls -al SingNature/SingNature/bin/Release/net8.0/
  #           cp -r SingNature/SingNature/bin/Release/net8.0/* /home/runner/work/_temp/codeql_databases/csharp/
  #           cp -r SingNature/SingNature/* /home/runner/work/_temp/codeql_databases/csharp/
  #       continue-on-error: true

  #     - name: Perform CodeQL Analysis and Generate SARIF Report
  #       uses: github/codeql-action/analyze@v3
  #       with:
  #           output: results-sast.sarif

  #     - name: Upload CodeQL SARIF Report as Artifact
  #       uses: actions/upload-artifact@v4
  #       with:
  #           name: SAST-report
  #           path: results-sast.sarif

  # dast_scan:
  #   name: Dynamic Security Analysis (DAST)
  #   runs-on: ubuntu-latest
  #   needs: build_and_test

  #   steps:
  #     - name: Check Docker Installation
  #       run: docker --version

  #     - name: Login to GitHub Container Registry
  #       run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "github" --password-stdin

  #     - name: Manually Pull OWASP ZAP Docker Image
  #       run: docker pull ghcr.io/zaproxy/zaproxy:weekly

  #     - name: Run OWASP ZAP Full Scan
  #       run: |
  #         docker run --user root -v $(pwd):/zap/wrk -t ghcr.io/zaproxy/zaproxy:weekly \
  #         zap-full-scan.py -t https://167.172.73.161 -r /zap/wrk/zap-report.html -I

  #     - name: Upload ZAP Report as Artifact
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: DAST-report
  #         path: zap-report.html

  deploy:
    name: Deploy to DigitalOcean Droplet
    runs-on: ubuntu-latest
    # needs: [build_and_test, security_scan, dast_scan]
    needs: [build_and_test]
    if: github.event_name == 'push'
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Login to GitHub Container Registry
        run: echo "${{ secrets.GHCR_PAT }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin

      - name: Build & Push Docker Image
        run: |
          IMAGE_NAME=ghcr.io/${{ github.repository_owner }}/singnature-app
          IMAGE_NAME=$(echo $IMAGE_NAME | tr '[:upper:]' '[:lower:]')

          docker build -t $IMAGE_NAME:v1 -f SingNature/SingNature/Dockerfile .
          docker tag $IMAGE_NAME:v1 $IMAGE_NAME:${{ github.sha }}

          docker push $IMAGE_NAME:v1
          docker push $IMAGE_NAME:${{ github.sha }}

      - name: Deploy to DigitalOcean via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DROPLET_IP }}
          username: ${{ secrets.DROPLET_USER }}
          key: ${{ secrets.DROPLET_SSH_KEY }}
          script: |
            IMAGE_NAME=ghcr.io/${{ github.repository_owner }}/singnature-app
            IMAGE_NAME=$(echo $IMAGE_NAME | tr '[:upper:]' '[:lower:]')

            echo "${{ secrets.GHCR_PAT }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin

            docker system prune -af
            docker pull $IMAGE_NAME:v1
            docker stop singnature-app || true && sleep 5
            docker rm singnature-app || true
            docker run -d -p 8080:8080 --restart unless-stopped --name singnature-app $IMAGE_NAME:v1