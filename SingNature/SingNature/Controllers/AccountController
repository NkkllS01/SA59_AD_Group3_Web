using Microsoft.AspNetCore.Mvc;
using SingNature.Models;
using SingNature.Data;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace SingNature.Controllers
{

    [Route("api/[controller]")]
    [ApiController]
    public class AccountController : ControllerBase
    {
    private readonly UserDAO _userDAO;

    public AccountController(UserDAO userDAO)
    {
        _userDAO = userDAO;
    }
    
    [HttpGet("{id}")]
        public async Task<ActionResult<UserViewModel>> GetUserById(int id)
        {
            var user = await _userDAO.GetUserById(id);
            if (user == null) return NotFound("User not found");

            var sightings = await _userDAO.GetUserSightings(id); // 确保这个方法在 UserDAO 里存在

            return Ok(new UserViewModel 
            { 
                User = user, 
                UserSightings = sightings 
            });
        }

    [HttpPost("login")]
    public async Task<ActionResult<User>> Login([FromBody] LoginModel loginModel)
    {
        var user = await _userDAO.ValidateUser(loginModel.Username, loginModel.Password);
        if (user == null) return Unauthorized("Invalid username or password");

         await _userDAO.UpdateLastLogin(user.UserId);

        return Ok(user);
    }

    [HttpPost("register")]
    public async Task<ActionResult<User>> Register([FromBody] User newUser)
    {
        try 
        {
             newUser.PasswordHash = _userDAO.HashPassword(newUser.Password);

            var user = await _userDAO.CreateUser(newUser);
            return CreatedAtAction(nameof(GetUserById), new { id = user.UserId }, user);
        }
        catch (Exception ex)
        {
            return BadRequest("Registration failed: " + ex.Message);
        }
    }

    [HttpPut("{id}")]
    public async Task<ActionResult<User>> UpdateUser(int id, [FromBody] User updatedUser)
    {
        if (id != updatedUser.UserId) return BadRequest("User ID does not match");

        var existingUser = await _userDAO.GetUserById(id);
        if (existingUser == null) return NotFound("User not found");

        var user = await _userDAO.UpdateUser(updatedUser);
        
        return Ok(user);
    }

    [HttpGet]
    public async Task<ActionResult<IEnumerable<User>>> GetAllUsers()
    {
        var users = await _userDAO.GetAllUsers();
        return Ok(users);
    }

    [HttpDelete("{id}")]
    public async Task<ActionResult> DeleteUser(int id)
    {
        var user = await _userDAO.GetUserById(id);
        if (user == null) return NotFound("User not found");

        var result = await _userDAO.DeleteUser(id);
        if (!result) return NotFound("User not found");
        return NoContent();
    }
}

     public class LoginModel
    {
        public string Username { get; set; }
        public string Password { get; set; }
    }
}
